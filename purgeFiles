#!/usr/bin/python

#
#   Copyright John Quinn, 2009
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import fnmatch
import getopt
import os
import shutil
import sys
import time


def main(argv):
    # set default behavior
    force = False
    ages = 'unset'
    directory = 'unset'
    pattern = '*'

    # process command line
    try:
        opts, args = getopt.getopt(argv, 'ha:d:p:f', ['help', 'ages=', 'directory=', 'pattern=', 'force'])
        if len(args) > 0:
            print('ignoring args: %s' % args)
    except getopt.GetoptError as err:
        print(str(err))
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
            sys.exit(2)
        elif opt in ('-d', '--directory'):
            directory = arg
        elif opt in ('-p', '--pattern'):
            pattern = arg
        elif opt in ('-a', '--ages'):
            ages = arg
        elif opt in ('-f', '--force'):
            force = True

    # verify mandatory arguments
    if ages == 'unset':
        print('age must be specified (the -a option)')
        usage()

    if directory == 'unset':
        print('directory must be specified (the -d option)')
        usage()

    # purge the directory
    purge(directory, pattern, ages, force)


# print the usage message and bail
def usage():
    print('Usage: purgeFiles [OPTION]...')
    print(' -h, --help                          Print this help message')
    print(' -a, --ages=age1,age2                Desired ages to keep (in days)')
    print(' -d, --directory=dir                 Target directory')
    print(' -p, --pattern=pattern               File pattern to match')
    print(' -f, --force                         Force deletion (no simulation mode)\n')
    print('e.g. purgeFiles --ages=1,2,4,40 --directory=/tmp --pattern="*.txt"')
    print('This would purge /tmp and try to keep a files ending in .txt of 40 days, 4 days, 2 days and 1 day old. ')
    print('Note: this would only do a simulation run. Specify --force to actually delete the files. ')

    print('\nAuthor: John Quinn, http://johnandcailin.com/john')
    sys.exit(2)


# check for backup directory permissions etc
def check_backup_area(directory):
    area_good = True

    if not os.path.exists(directory):
        print('filepurge: directory %s: does not exist\n' % directory)
        usage()

    if not os.path.isdir(directory):
        print('filepurge: %s is not a directory. please specify the directory to be purged\n' % directory)
        usage()

    access = os.access(directory, os.W_OK | os.R_OK)
    if not access:
        print('filepurge: directory %s: not readable and writable\n' % directory)
        usage()


# check our argument validity
def check_arguments(ages):
    clean, ages_list = parse_ages_argument(ages)
    if not clean:
        print('filepurge: invalid ages argument: %s' % ages)
        usage()
    return ages_list


# parse ages argument and return a reverse-chronological list of desired ages in seconds from the epoch
def parse_ages_argument(ages):
    clean = True
    ages_list = []
    ages_string_list = ages.split(',')
    for ageString in ages_string_list:
        if not ageString.isdigit():
            clean = False
            break
    for ageString in ages_string_list:
        try:
            ages_list.append(int(ageString))
        except ValueError:
            clean = False
            break

    ages_list.sort(reverse=True)
    return clean, ages_list


# return an age sorted directory listing (tuple list), with ages
def get_sorted_dir_list(directory, pattern):
    dir_list = os.listdir(directory)
    sorted_dir_list = []

    for baseName in dir_list:
        if fnmatch.fnmatch(baseName, pattern):
            file_name = os.path.join(directory, baseName)
            file_age = os.path.getmtime(file_name)
            file_tuple = (file_age, file_name, baseName)
            sorted_dir_list.append(file_tuple)
    sorted_dir_list.sort()

    return sorted_dir_list


# delete the file respecting the force mode
def delete_file(file, force):
    base_name = file[2]
    file_name = file[1]
    if not force:
        print('%s: Flagged for deletion' % base_name)
    else:
        # First check if we are removing a folder or a file...
        if os.path.isdir(file_name):
            shutil.rmtree(file_name)
            print('%s: Deleted Folder' % base_name)
        elif os.path.isfile(file_name):
            os.remove(file_name)
            print('%s: Deleted' % base_name)
        else:
            print('%s: is not a file or folder - WARNING!' % base_name)


# convert an age in days to seconds from the epoch
def convert_age_to_age_epoch(age):
    age_epoch = int(time.time()) - (age * 24 * 60 * 60)
    return age_epoch


# convert an age in seconds from the epoch to days
def convert_age_epoch_to_age(ageepoch):
    age = (int(time.time()) - ageepoch) / (24 * 60 * 60)
    return age


# purge the specified directory
def purge(directory, pattern, ages, force):
    # make sure the backup directory is sound
    check_backup_area(directory)

    # check arguments are sensible
    ages_list = check_arguments(ages)

    # get the listing of the backup directory
    sorted_dir_list = get_sorted_dir_list(directory, pattern)

    # go through each file in the directory and ensure that it's a keeper
    ages_iterator = iter(ages_list)
    current_desired_age = ages_iterator.__next__()
    completed_desired_ages = False

    print("finding files matching pattern %s of ages %s in directory %s" % (pattern, ages, directory))

    for i, file in enumerate(sorted_dir_list):
        current_desired_age_epoch = convert_age_to_age_epoch(current_desired_age)
        keeper = False
        file_age = file[0]
        if i < len(sorted_dir_list) - 1:
            next_file = sorted_dir_list[i + 1]
            next_file_age = next_file[0]

            # should we delete this file?
            if (completed_desired_ages is True) or (
                    (file_age < current_desired_age_epoch) and (next_file_age < current_desired_age_epoch)):
                delete_file(file, force)
            else:
                keeper = True
        else:
            # we're at the last item. if we're still looking, keep it
            if not completed_desired_ages:
                keeper = True
            else:
                delete_file(file, force)

        # lovely we found a keeper, so get the next file age to satisfy
        if keeper:
            file_age_days = convert_age_epoch_to_age(file_age)
            print('%s: keeping this file of age %d days to satisfy age %d days' % (
                file[2], file_age_days, current_desired_age))
            try:
                current_desired_age = ages_iterator.__next__()
            except StopIteration:
                completed_desired_ages = True

    # if we haven't made our way through all the requested ages, process them anyway, solely to message the user
    if not completed_desired_ages:
        while True:
            print('no file to satisfy age %d' % current_desired_age)
            try:
                current_desired_age = ages_iterator.__next__()
            except StopIteration:
                break


if __name__ == '__main__':
    main(sys.argv[1:])
